//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Contexto : DbContext
    {
        public Contexto()
            : base("name=Contexto")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Controlador> Controlador { get; set; }
        public virtual DbSet<Modulo> Modulo { get; set; }
        public virtual DbSet<Operaciones> Operaciones { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<Rol_Operacion> Rol_Operacion { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<AditExt> AditExt { get; set; }
        public virtual DbSet<AparElec> AparElec { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Contrato> Contrato { get; set; }
        public virtual DbSet<Cuarto> Cuarto { get; set; }
        public virtual DbSet<DañoCliente> DañoCliente { get; set; }
        public virtual DbSet<Daños> Daños { get; set; }
        public virtual DbSet<DetalleMante> DetalleMante { get; set; }
        public virtual DbSet<Mantenimiento> Mantenimiento { get; set; }
        public virtual DbSet<Mora> Mora { get; set; }
        public virtual DbSet<Pago> Pago { get; set; }
        public virtual DbSet<TipoPago> TipoPago { get; set; }
    
        public virtual ObjectResult<SpListarUsuariosRoles_Result> SpListarUsuariosRoles(Nullable<bool> estadoUsuario)
        {
            var estadoUsuarioParameter = estadoUsuario.HasValue ?
                new ObjectParameter("EstadoUsuario", estadoUsuario) :
                new ObjectParameter("EstadoUsuario", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpListarUsuariosRoles_Result>("SpListarUsuariosRoles", estadoUsuarioParameter);
        }
    
        public virtual ObjectResult<SpListarRoles_Result> SpListarRoles(Nullable<bool> estadoRol)
        {
            var estadoRolParameter = estadoRol.HasValue ?
                new ObjectParameter("EstadoRol", estadoRol) :
                new ObjectParameter("EstadoRol", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpListarRoles_Result>("SpListarRoles", estadoRolParameter);
        }
    
        public virtual ObjectResult<spConseguirCuartos_Result> spConseguirCuartos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConseguirCuartos_Result>("spConseguirCuartos");
        }
    
        public virtual ObjectResult<spConseguirCuartoporId_Result> spConseguirCuartoporId(Nullable<int> idCuarto)
        {
            var idCuartoParameter = idCuarto.HasValue ?
                new ObjectParameter("IdCuarto", idCuarto) :
                new ObjectParameter("IdCuarto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConseguirCuartoporId_Result>("spConseguirCuartoporId", idCuartoParameter);
        }
    
        public virtual int spEliminarCuarto(Nullable<int> idCuarto)
        {
            var idCuartoParameter = idCuarto.HasValue ?
                new ObjectParameter("IdCuarto", idCuarto) :
                new ObjectParameter("IdCuarto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarCuarto", idCuartoParameter);
        }
    
        public virtual int spModificarCuarto(Nullable<int> idcuarto, string codigoCuarto, string descripCuarto, Nullable<double> costo, Nullable<int> modificaPor)
        {
            var idcuartoParameter = idcuarto.HasValue ?
                new ObjectParameter("idcuarto", idcuarto) :
                new ObjectParameter("idcuarto", typeof(int));
    
            var codigoCuartoParameter = codigoCuarto != null ?
                new ObjectParameter("CodigoCuarto", codigoCuarto) :
                new ObjectParameter("CodigoCuarto", typeof(string));
    
            var descripCuartoParameter = descripCuarto != null ?
                new ObjectParameter("DescripCuarto", descripCuarto) :
                new ObjectParameter("DescripCuarto", typeof(string));
    
            var costoParameter = costo.HasValue ?
                new ObjectParameter("Costo", costo) :
                new ObjectParameter("Costo", typeof(double));
    
            var modificaPorParameter = modificaPor.HasValue ?
                new ObjectParameter("ModificaPor", modificaPor) :
                new ObjectParameter("ModificaPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModificarCuarto", idcuartoParameter, codigoCuartoParameter, descripCuartoParameter, costoParameter, modificaPorParameter);
        }
    
        public virtual int spAgregarCuarto(string codigoCuarto, string descripcionCuarto, Nullable<bool> estadoRenta, Nullable<bool> estadoMante, Nullable<double> costoCuarto, Nullable<int> creadoPor)
        {
            var codigoCuartoParameter = codigoCuarto != null ?
                new ObjectParameter("CodigoCuarto", codigoCuarto) :
                new ObjectParameter("CodigoCuarto", typeof(string));
    
            var descripcionCuartoParameter = descripcionCuarto != null ?
                new ObjectParameter("DescripcionCuarto", descripcionCuarto) :
                new ObjectParameter("DescripcionCuarto", typeof(string));
    
            var estadoRentaParameter = estadoRenta.HasValue ?
                new ObjectParameter("EstadoRenta", estadoRenta) :
                new ObjectParameter("EstadoRenta", typeof(bool));
    
            var estadoManteParameter = estadoMante.HasValue ?
                new ObjectParameter("EstadoMante", estadoMante) :
                new ObjectParameter("EstadoMante", typeof(bool));
    
            var costoCuartoParameter = costoCuarto.HasValue ?
                new ObjectParameter("CostoCuarto", costoCuarto) :
                new ObjectParameter("CostoCuarto", typeof(double));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarCuarto", codigoCuartoParameter, descripcionCuartoParameter, estadoRentaParameter, estadoManteParameter, costoCuartoParameter, creadoPorParameter);
        }
    
        public virtual ObjectResult<spObtenerMantenimiento_Result> spObtenerMantenimiento(Nullable<int> estadoCuarto)
        {
            var estadoCuartoParameter = estadoCuarto.HasValue ?
                new ObjectParameter("EstadoCuarto", estadoCuarto) :
                new ObjectParameter("EstadoCuarto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerMantenimiento_Result>("spObtenerMantenimiento", estadoCuartoParameter);
        }
    
        public virtual ObjectResult<spObtenerClientesContratosyCuartos_Result> spObtenerClientesContratosyCuartos(Nullable<int> estadoContrato)
        {
            var estadoContratoParameter = estadoContrato.HasValue ?
                new ObjectParameter("EstadoContrato", estadoContrato) :
                new ObjectParameter("EstadoContrato", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerClientesContratosyCuartos_Result>("spObtenerClientesContratosyCuartos", estadoContratoParameter);
        }
    
        public virtual ObjectResult<spObtenerClientesContratosyCuartosConID_Result> spObtenerClientesContratosyCuartosConID(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spObtenerClientesContratosyCuartosConID_Result>("spObtenerClientesContratosyCuartosConID", idClienteParameter);
        }
    
        public virtual ObjectResult<spConseguirCuartosDisponibles2_Result> spConseguirCuartosDisponibles2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConseguirCuartosDisponibles2_Result>("spConseguirCuartosDisponibles2");
        }
    
        public virtual int EliminarContratoConCliente(Nullable<int> idCliente, Nullable<int> anuladoPor)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var anuladoPorParameter = anuladoPor.HasValue ?
                new ObjectParameter("AnuladoPor", anuladoPor) :
                new ObjectParameter("AnuladoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarContratoConCliente", idClienteParameter, anuladoPorParameter);
        }
    
        public virtual int spAgregarClienteYContrato(string nomCliente, string apellido, string cedula, string telCliente, string correo, Nullable<System.DateTime> fechaIni, Nullable<System.DateTime> fechafin, Nullable<decimal> deposito, Nullable<int> idCuarto, Nullable<int> creadoPor)
        {
            var nomClienteParameter = nomCliente != null ?
                new ObjectParameter("NomCliente", nomCliente) :
                new ObjectParameter("NomCliente", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telClienteParameter = telCliente != null ?
                new ObjectParameter("TelCliente", telCliente) :
                new ObjectParameter("TelCliente", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var fechaIniParameter = fechaIni.HasValue ?
                new ObjectParameter("FechaIni", fechaIni) :
                new ObjectParameter("FechaIni", typeof(System.DateTime));
    
            var fechafinParameter = fechafin.HasValue ?
                new ObjectParameter("Fechafin", fechafin) :
                new ObjectParameter("Fechafin", typeof(System.DateTime));
    
            var depositoParameter = deposito.HasValue ?
                new ObjectParameter("Deposito", deposito) :
                new ObjectParameter("Deposito", typeof(decimal));
    
            var idCuartoParameter = idCuarto.HasValue ?
                new ObjectParameter("IdCuarto", idCuarto) :
                new ObjectParameter("IdCuarto", typeof(int));
    
            var creadoPorParameter = creadoPor.HasValue ?
                new ObjectParameter("CreadoPor", creadoPor) :
                new ObjectParameter("CreadoPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAgregarClienteYContrato", nomClienteParameter, apellidoParameter, cedulaParameter, telClienteParameter, correoParameter, fechaIniParameter, fechafinParameter, depositoParameter, idCuartoParameter, creadoPorParameter);
        }
    
        public virtual int spModificarClienteYContrato(Nullable<int> idCliente, Nullable<int> idContrato, string nomCliente, string apellido, string cedula, string telCliente, string correo, Nullable<System.DateTime> fechaIni, Nullable<System.DateTime> fechafin, Nullable<decimal> deposito, Nullable<int> idCuarto, Nullable<int> modificaPor)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idContratoParameter = idContrato.HasValue ?
                new ObjectParameter("IdContrato", idContrato) :
                new ObjectParameter("IdContrato", typeof(int));
    
            var nomClienteParameter = nomCliente != null ?
                new ObjectParameter("NomCliente", nomCliente) :
                new ObjectParameter("NomCliente", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var telClienteParameter = telCliente != null ?
                new ObjectParameter("TelCliente", telCliente) :
                new ObjectParameter("TelCliente", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var fechaIniParameter = fechaIni.HasValue ?
                new ObjectParameter("FechaIni", fechaIni) :
                new ObjectParameter("FechaIni", typeof(System.DateTime));
    
            var fechafinParameter = fechafin.HasValue ?
                new ObjectParameter("Fechafin", fechafin) :
                new ObjectParameter("Fechafin", typeof(System.DateTime));
    
            var depositoParameter = deposito.HasValue ?
                new ObjectParameter("Deposito", deposito) :
                new ObjectParameter("Deposito", typeof(decimal));
    
            var idCuartoParameter = idCuarto.HasValue ?
                new ObjectParameter("IdCuarto", idCuarto) :
                new ObjectParameter("IdCuarto", typeof(int));
    
            var modificaPorParameter = modificaPor.HasValue ?
                new ObjectParameter("ModificaPor", modificaPor) :
                new ObjectParameter("ModificaPor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spModificarClienteYContrato", idClienteParameter, idContratoParameter, nomClienteParameter, apellidoParameter, cedulaParameter, telClienteParameter, correoParameter, fechaIniParameter, fechafinParameter, depositoParameter, idCuartoParameter, modificaPorParameter);
        }
    
        public virtual ObjectResult<spmostrar_Result> spmostrar(Nullable<int> idcliente)
        {
            var idclienteParameter = idcliente.HasValue ?
                new ObjectParameter("idcliente", idcliente) :
                new ObjectParameter("idcliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spmostrar_Result>("spmostrar", idclienteParameter);
        }
    
        public virtual ObjectResult<spConseguirClientes_Result> spConseguirClientes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spConseguirClientes_Result>("spConseguirClientes");
        }
    }
}
